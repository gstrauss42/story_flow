name: AI Story Point Estimation

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

jobs:
  estimate-story-points:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && !contains(join(github.event.issue.labels.*.name, ' '), 'sp-')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/estimate'))
    
    steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Estimate Story Points
      id: estimate
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip install requests
        
        python << 'EOF'
        import os
        import json
        import requests
        
        # Get issue details
        issue_number = ${{ github.event.issue.number }}
        issue_title = """${{ github.event.issue.title }}"""
        issue_body = """${{ github.event.issue.body }}"""
        
        # Prepare message for your AI endpoint
        message = f"""
        GitHub Issue #{issue_number}
        Title: {issue_title}
        Description: {issue_body}
        
        Please estimate story points for this issue using Fibonacci sequence (1, 2, 3, 5, 8, 13, 21).
        Provide the estimate and explanation.
        """
        
        try:
            # Call your API endpoint
            response = requests.post(
                "https://story-flow.onrender.com/agents/estimate",
                json={"message": message},
                headers={"Content-Type": "application/json"},
                timeout=30
            )
            response.raise_for_status()
            
            # Get JSON response
            result = response.json()
            
            # Ensure story points is valid Fibonacci
            story_points = result.get('story_points', 5)
            fibonacci = [1, 2, 3, 5, 8, 13, 21]
            story_points = min(fibonacci, key=lambda x: abs(x - story_points))
            
            # Update result with validated points
            result['story_points'] = story_points
            
        except Exception as e:
            print(f"Error calling AI endpoint: {e}")
            # Fallback
            result = {
                "story_points": 5,
                "explanation": "Could not get AI estimation. Using default.",
                "confidence": 0.3
            }
        
        # Output for next steps
        print(f"STORY_POINTS={result['story_points']}")
        with open('result.json', 'w') as f:
            json.dump(result, f)
        EOF
        
        # Set output
        echo "points=$(grep STORY_POINTS= <<< "${{ steps.estimate.outputs.stdout }}" | cut -d= -f2)" >> $GITHUB_OUTPUT
    
    - name: Update Issue Labels
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const result = JSON.parse(fs.readFileSync('result.json', 'utf8'));
          
          // Remove any existing story point labels
          const currentLabels = await github.rest.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          for (const label of currentLabels.data) {
            if (label.name.startsWith('sp-')) {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: label.name
              });
            }
          }
          
          // Create label if it doesn't exist
          const labelName = `sp-${result.story_points}`;
          try {
            await github.rest.issues.getLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: labelName
            });
          } catch (error) {
            // Label doesn't exist, create it
            const colors = {
              'sp-1': 'c5def5',
              'sp-2': 'c5def5',
              'sp-3': '1d76db',
              'sp-5': '1d76db',
              'sp-8': 'f9d0c4',
              'sp-13': 'e99695',
              'sp-21': 'd93f0b'
            };
            
            await github.rest.issues.createLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: labelName,
              color: colors[labelName] || 'cccccc',
              description: `${result.story_points} story points`
            });
          }
          
          // Add the label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: [labelName]
          });
          
          // Add explanation comment
          const comment = `## ðŸŽ¯ AI Story Point Estimation
          
          **Story Points:** \`${result.story_points}\`
          **Confidence:** ${(result.confidence * 100).toFixed(0)}%
          
          ### ðŸ“Š Analysis:
          ${result.explanation}
          
          ---
          *This is an automated estimate. Type \`/estimate\` in a comment to re-analyze.*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: comment
          });